{"version":3,"sources":["redux/reducers/userReducer.js","redux/reducers/dataReducer.js","redux/reducers/uiReducer.js","redux/store.js","redux/types.js","redux/actions/userActions.js","util/myButton.js","components/navbar.js","util/AuthRoute.js","components/Post.js","redux/actions/dataActions.js","components/EditDetails.js","components/Profile.js","pages/home.js","pages/login.js","pages/signup.js","App.js","util/theme.js","serviceWorker.js","index.js","images/icon.png"],"names":["initialState","authenticated","loading","credentials","likes","notifications","posts","post","errors","middleware","thunk","console","log","reducers","combineReducers","user","state","action","type","payload","userHandle","handle","postId","filter","like","data","index","findIndex","UI","store","createStore","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","logoutUser","dispatch","localStorage","removeItem","axios","defaults","headers","common","getUserData","get","then","result","catch","err","setAuthorizationHeader","token","FBIdToken","setItem","children","onClick","tip","btnClassName","tipClassName","title","className","placement","IconButton","navbar","this","props","AppBar","Toolbar","to","Button","color","component","Link","Component","connect","rest","render","Post","likedPost","find","likePost","unlikePost","dayjs","extend","relatativeTime","classes","body","createdAt","userImage","likeCount","commentCount","likeButton","Card","card","CardMedia","image","CardContent","content","Typography","variant","fromNow","mapActionsToProps","withStyles","display","marginBottom","minWidth","padding","objectFit","EditDetails","bio","location","open","handleOpen","setState","mapUserDetailToState","handleClose","handleChange","event","target","name","value","handleSubmit","userDetails","editUserDetails","button","Dialog","onClose","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","label","multiline","rows","placeholder","textField","onChange","DialogActions","theme","form","textAlign","margin","height","width","pageTitle","position","float","progress","customError","fontSize","marginTop","Profile","handleImageChange","files","formData","FormData","append","uploadImage","handleEditPicture","document","getElementById","click","handleLogout","imageUrl","Paper","paper","profile","src","alt","id","hidden","format","align","buttons","top","left","borderRadius","verticalAlign","border","cursor","home","getPosts","recentPostMarkup","map","key","Grid","container","spacing","item","sm","xs","login","preventDefault","userData","email","password","loginUser","history","nextProps","AppIcon","noValidate","onSubmit","helperText","error","general","disabled","CircularProgress","size","push","response","signup","newUserData","confirmPassword","signupUser","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","typography","useNextVarients","baseURL","jwtDecode","exp","Date","now","href","App","exact","path","Boolean","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"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","file":"static/js/main.683fadbb.chunk.js","sourcesContent":["import { SET_USER,\r\n    SET_UNAUTHENTICATED,\r\n    SET_AUTHENTICATED,\r\n    LOADING_USER,\r\n    LIKE_POST,\r\n    UNLIKE_POST\r\n} from '../types';\r\n\r\n//state of user reducer data\r\nconst initialState = {\r\n    authenticated: false,\r\n    loading: false,\r\n    credentials: {},\r\n    likes: [],\r\n    notifications: []\r\n};\r\n\r\n//switch case user login state\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        //change auth flag\r\n        case SET_AUTHENTICATED:\r\n            return {\r\n                ...state,\r\n                authenticated: true\r\n            };\r\n        //change auth flag\r\n        case SET_UNAUTHENTICATED:\r\n            return initialState;\r\n        //set user details w/ payload\r\n        case SET_USER:\r\n            return {\r\n                authenticated: true,\r\n                loading: false,\r\n                ...action.payload\r\n            }\r\n        //load user details\r\n        case LOADING_USER:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        //add like\r\n        case LIKE_POST:\r\n            return {\r\n                ...state,\r\n                likes: [\r\n                    ...state.likes,\r\n                    {\r\n                        userHandle: state.credentials.handle,\r\n                        postId: action.payload.postId\r\n                    }\r\n                ]\r\n            }\r\n        //remove like\r\n        case UNLIKE_POST:\r\n            return {\r\n                ...state,\r\n                likes: state.likes.filter(\r\n                    like => like.postId !== action.payload.postId\r\n                )\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_POSTS,LOADING_DATA,LIKE_POST,UNLIKE_POST } from '../types';\r\n\r\nconst initialState = {\r\n    posts: [],\r\n    post: {},\r\n    loading: false\r\n}\r\n\r\nexport default function(state = initialState,action) {\r\n    switch(action.type) {\r\n        //load posts\r\n        case LOADING_DATA:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        //set post w/ payload\r\n        case SET_POSTS:\r\n            return {\r\n                ...state,\r\n                posts: action.payload,\r\n                loading: false\r\n            }\r\n        //find and match post with payload to like\r\n        case LIKE_POST:\r\n        case UNLIKE_POST:\r\n            let index = state.posts.findIndex((post) => post.postId === action.payload.postId)\r\n            state.posts[index] = action.payload;\r\n            return {\r\n                ...state\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_ERRORS,LOADING_UI,CLEAR_ERRORS } from '../types';\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    errors:null\r\n}\r\n\r\nexport default function(state = initialState, action) {\r\n    switch( action.type) {\r\n        case SET_ERRORS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errors: action.payload\r\n            };\r\n        case CLEAR_ERRORS:\r\n            return {\r\n                ...state,\r\n                loading: false,\r\n                errors: null\r\n            };\r\n        case LOADING_UI:\r\n            return {\r\n                ...state,\r\n                loading: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\n//util/reducer redux\r\nimport userReducer from './reducers/userReducer';\r\nimport dataReducer from './reducers/dataReducer';\r\nimport uiReducer from './reducers/uiReducer';\r\n\r\n//initialize\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconsole.log(middleware);\r\n\r\n//combine reducer files\r\nconst reducers = combineReducers({\r\n    user: userReducer,\r\n    data: dataReducer,\r\n    UI: uiReducer\r\n});\r\n\r\n//create store: requires redux devtools!!\r\nconst store = createStore(\r\n    reducers,\r\n    initialState,\r\n    compose(\r\n        applyMiddleware(...middleware),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n);\r\n\r\nexport default store;","//user reducer types\r\nexport const SET_AUTHENTICATED = 'SET_AUTHENTICATED';\r\nexport const SET_UNAUTHENTICATED = 'SET_UNAUTHENTICATED';\r\nexport const SET_USER = 'SET_USER';\r\nexport const LOADING_USER = 'LOADING-USER';\r\n\r\n//UI reducer types\r\nexport const SET_ERRORS = 'SET_ERRORS';\r\nexport const LOADING_UI = 'LOADING_UI';\r\nexport const CLEAR_ERRORS = 'CLEAR_ERRORS';\r\nexport const LOADING_DATA = 'LOADING_DATA';\r\n\r\n//data reducer types\r\nexport const SET_POSTS = 'SET_POSTS';\r\nexport const SET_POST = 'SET_POST';\r\nexport const LIKE_POST = 'LIKE_POST';\r\nexport const UNLIKE_POST = 'UNLIKE_POST';","import { \r\n    SET_USER,\r\n    SET_ERRORS,\r\n    LOADING_UI,\r\n    CLEAR_ERRORS,\r\n    SET_UNAUTHENTICATED,\r\n    LOADING_USER\r\n} from '../types';\r\nimport axios from 'axios';\r\n\r\n//login function\r\nexport const loginUser = (userData,history) => (dispatch) => {\r\n    dispatch({ type: LOADING_UI });\r\n    //process login\r\n    axios.post('/login',userData)\r\n    .then((result) => {\r\n        setAuthorizationHeader(result.data.token);\r\n        dispatch(getUserData());\r\n        //clear error from form\r\n        dispatch({ type: CLEAR_ERRORS});\r\n        //actual redirection\r\n        history.push('/');\r\n    })\r\n    .catch((err) => {\r\n        dispatch({\r\n            type: SET_ERRORS,\r\n            payload: err.response.data\r\n        })\r\n    });\r\n}\r\n\r\n//logout function\r\nexport const logoutUser = () => (dispatch) => {\r\n    localStorage.removeItem('FBIdToken');\r\n    delete axios.defaults.headers.common['Authorization'];\r\n    dispatch({ type: SET_UNAUTHENTICATED });\r\n}\r\n\r\n//get user data function when logged in\r\nexport const getUserData = () => (dispatch) => {\r\n    dispatch({ type: LOADING_USER });\r\n    axios.get('/user')\r\n    .then((result) => {\r\n        dispatch({\r\n            type: SET_USER,\r\n            payload: result.data\r\n        })\r\n    })\r\n    .catch((err) => console.log(err));\r\n}\r\n\r\n//signup function\r\nexport const signupUser = (newUserData,history) => (dispatch) => {\r\n    dispatch({ type: LOADING_UI });\r\n    //process signup\r\n    axios.post('/signup',newUserData)\r\n    .then((result) => {\r\n        //authorize token help function\r\n        setAuthorizationHeader(result.data.token);\r\n        dispatch(getUserData());\r\n        //clear error from form\r\n        dispatch({ type: CLEAR_ERRORS});\r\n        //actual redirection\r\n        history.push('/');\r\n    })\r\n    .catch((err) => {\r\n        dispatch({\r\n            type: SET_ERRORS,\r\n            payload: err.response.data\r\n        })\r\n    });\r\n}\r\n\r\n//upload image function\r\nexport const uploadImage = (formData) => (dispatch) => {\r\n    dispatch({ type: LOADING_USER })\r\n    axios.post('/user/image', formData)\r\n    .then((result) => {\r\n        dispatch(getUserData());\r\n    })\r\n    .catch((err) => console.log(err));\r\n}\r\n\r\n//edit user details function\r\nexport const editUserDetails = (userDetails) => (dispatch) => {\r\n    dispatch({ type: LOADING_USER });\r\n    axios.post('/user', userDetails)\r\n    .then(() => {\r\n        dispatch(getUserData());\r\n    })\r\n    .catch((err) => console.log(err));\r\n}\r\n\r\nconst setAuthorizationHeader = (token) => {\r\n    //store bearer token locally and get user data\r\n    const FBIdToken = `Bearer ${token}`;\r\n    localStorage.setItem('FBIdToken', FBIdToken);\r\n    axios.defaults.headers.common['Authorization'] = FBIdToken;\r\n}","import React, { Component,Fragment } from 'react';\r\n\r\n//material ui components\r\nimport ToolTip from '@material-ui/core/ToolTip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nexport default ({ children,onClick,tip,btnClassName,tipClassName }) => (\r\n    <ToolTip title={tip} className={tipClassName} placement=\"top\">\r\n        <IconButton onClick={onClick} className={btnClassName}>\r\n            {children}\r\n        </IconButton>\r\n    </ToolTip>\r\n);","import React, { Component,Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport MyButton from '../util/myButton';\r\n\r\n//material UI navigation\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n//npm install --save @material-ui/icons\r\n//icons\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport Notifications from '@material-ui/icons/Notifications';\r\n\r\nclass navbar extends Component {\r\n    render() {\r\n        const { authenticated } = this.props\r\n        return (\r\n            //Each button is a navbar menu item\r\n            <AppBar>\r\n                <Toolbar className=\"nav-container\">\r\n                    {authenticated ? (\r\n                            <Fragment>\r\n                                <MyButton tip=\"Post\">\r\n                                    <AddIcon/>\r\n                                </MyButton>\r\n                                <Link to=\"/\">\r\n                                <MyButton tip=\"Home\">\r\n                                    <HomeIcon/>\r\n                                </MyButton>\r\n                                </Link>\r\n                                <MyButton tip=\"Notifications\">\r\n                                    <Notifications/>\r\n                                </MyButton>\r\n                            </Fragment>\r\n                        )\r\n                        : (\r\n                            <Fragment>\r\n                                <Button color=\"inherit\" component={Link} to=\"/\">\r\n                                    Home\r\n                                </Button>\r\n                                <Button color=\"inherit\" component={Link} to=\"/login\">\r\n                                    Login\r\n                                </Button>\r\n                                <Button color=\"inherit\" component={Link} to=\"/signup\">\r\n                                    Signup\r\n                                </Button>\r\n                            </Fragment>\r\n                        )\r\n                    }\r\n                </Toolbar>\r\n            </AppBar>\r\n        );\r\n    }\r\n}\r\n\r\n//checks prop types for auth\r\nnavbar.propTypes = {\r\n    authenticated: PropTypes.bool.isRequired\r\n};\r\n\r\n//map auth state to global props\r\nconst mapStateToProps = (state) => ({\r\n    authenticated: state.user.authenticated\r\n});\r\n\r\nexport default connect(mapStateToProps)(navbar);","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\n\r\n//authenticates routing\r\nconst AuthRoute = ({component: Component, authenticated, ...rest}) => (\r\n    <Route\r\n        { ...rest }\r\n        render={(props) => \r\n            authenticated === true ? <Redirect to='/'/> : <Component { ...props}/>\r\n        }\r\n    />\r\n);\r\n\r\n//map route state to global props\r\nconst mapStateToProps = (state) => ({\r\n    authenticated: state.user.authenticated\r\n});\r\n\r\n//checks prop types for user auth\r\nAuthRoute.propTypes = {\r\n    user: PropTypes.object.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps)(AuthRoute);","import React, { Component } from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport { Link } from 'react-router-dom';\r\n//npm install --save dayjs\r\nimport dayjs from 'dayjs';\r\nimport relatativeTime from 'dayjs/plugin/relativeTime';\r\nimport PropTypes from 'prop-types';\r\nimport MyButton from '../util/myButton';\r\n\r\n//material ui card components\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n//redux components\r\nimport { connect } from 'react-redux';\r\nimport { likePost,unlikePost } from '../redux/actions/dataActions';\r\n\r\n//icons\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorder from '@material-ui/icons/FavoriteBorder';\r\n\r\nconst styles = {\r\n    card: {\r\n        display: 'flex',\r\n        marginBottom: 20\r\n    },\r\n    image: {\r\n        minWidth: 200\r\n    },\r\n    content: {\r\n        padding: 25,\r\n        objectFit: 'cover'\r\n    }\r\n}\r\n\r\nclass Post extends Component {\r\n    //check for likes for post\r\n    likedPost = () => {\r\n        if(this.props.user.likes &&\r\n            this.props.user.likes.find(\r\n                (like) => like.postId === this.props.post.postId\r\n            )) \r\n        {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    };\r\n    //give like to post\r\n    likePost = () => {\r\n        this.props.likePost(this.props.post.postId);\r\n    };\r\n    unlikePost = () => {\r\n        this.props.unlikePost(this.props.post.postId);\r\n    };\r\n    render() {\r\n        dayjs.extend(relatativeTime);\r\n        //extract fields from post\r\n        const { classes,\r\n            post:{\r\n                body,\r\n                createdAt,\r\n                userImage,\r\n                userHandle,\r\n                postId,\r\n                likeCount,\r\n                commentCount\r\n            },\r\n            user: {\r\n                authenticated\r\n            }\r\n         } = this.props;\r\n        //check for auth to use button\r\n        const likeButton = !authenticated ? (\r\n            //button to like\r\n            <MyButton tip=\"like\">\r\n                <Link to=\"/login\">\r\n                    <FavoriteBorder color=\"primary\"/>\r\n                </Link>\r\n            </MyButton>\r\n        ) :\r\n        //already liked?\r\n        (\r\n            this.likedPost() ? (\r\n                <MyButton tip=\"Undo like\" onClick={this.unlikePost}>\r\n                    <FavoriteIcon color=\"primary\"/>\r\n                </MyButton>\r\n            ) :\r\n            (\r\n                <MyButton tip=\"Like\" onClick={this.likePost}>\r\n                    <FavoriteBorder color=\"primary\"/>\r\n                </MyButton>\r\n            )\r\n        )\r\n        return (\r\n            //card rendering\r\n            <Card className={classes.card}>\r\n                <CardMedia\r\n                    image={userImage}\r\n                    title=\"Profile image\"\r\n                    className={classes.image}/>\r\n                <CardContent className={classes.content}>\r\n                    <Typography\r\n                        variant=\"h5\"\r\n                        component={Link}\r\n                        to={`/users/${userHandle}`}\r\n                        color=\"primary\">\r\n                        {userHandle}\r\n                    </Typography>\r\n                    {/*createdAt no nanoseconds?*/}\r\n                    <Typography\r\n                        variant=\"body2\"\r\n                        color=\"textSecondary\">\r\n                            {dayjs(createdAt).fromNow()}\r\n                    </Typography>\r\n                    {/**/}\r\n                    <Typography\r\n                        variant=\"body1\">\r\n                        {body}\r\n                    </Typography>\r\n                    {likeButton}\r\n                    <span>{likeCount} Likes</span>\r\n                    <MyButton tip=\"comments\">\r\n                        <ChatIcon color=\"primary\"/>\r\n                    </MyButton>\r\n                    <span>{commentCount} Comments</span>\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\n//checks prop types for posts\r\nPost.propTypes = {\r\n    likePost: PropTypes.func.isRequired,\r\n    unlikePost: PropTypes.func.isRequired,\r\n    user: PropTypes.object.isRequired,\r\n    post: PropTypes.object.isRequired,\r\n    classes: PropTypes.object.isRequired\r\n}\r\n\r\n//map post state to global props\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user\r\n});\r\n\r\n//actions used\r\nconst mapActionsToProps = {\r\n    likePost,\r\n    unlikePost\r\n}\r\n\r\nexport default connect(mapStateToProps,mapActionsToProps)(withStyles(styles)(Post));","import { SET_POSTS,LOADING_DATA,LIKE_POST,UNLIKE_POST } from '../types';\r\nimport axios from 'axios';\r\n\r\n//get all posts\r\nexport const getPosts = () => (dispatch) => {\r\n    dispatch({ type: LOADING_DATA });\r\n    axios.get('/posts')\r\n    .then((result) => {\r\n        dispatch({\r\n            type: SET_POSTS,\r\n            payload: result.data\r\n        })\r\n    })\r\n    .catch((err) => {\r\n        dispatch({\r\n            type: SET_POSTS,\r\n            payload: null\r\n        })\r\n    })\r\n}\r\n\r\n//like a post\r\nexport const likePost = (postId) => (dispatch) => {\r\n    axios.get(`/post/${postId}/like`)\r\n    .then((result) => {\r\n        dispatch({\r\n            type: LIKE_POST,\r\n            payload: result.data\r\n        })\r\n    })\r\n    .catch((err) => console.log(err));\r\n}\r\n\r\n//unlike a post\r\nexport const unlikePost = (postId) => (dispatch) => {\r\n    axios.get(`/post/${postId}/unlike`)\r\n    .then((result) => {\r\n        dispatch({\r\n            type: UNLIKE_POST,\r\n            payload: result.data\r\n        })\r\n    })\r\n    .catch((err) => console.log(err));\r\n}","import React, { Component,Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport MyButton from '../util/myButton';\r\n\r\n//material ui components\r\nimport ToolTip from '@material-ui/core/ToolTip';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { editUserDetails } from '../redux/actions/userActions';\r\n\r\n//npm install --save @material-ui/icons\r\n//icons\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst styles = (theme) => ({\r\n    form: {\r\n        textAlign: 'center'\r\n    },\r\n    image: {\r\n        margin: '20px auto 10px auto',\r\n        height: '50px',\r\n        width: '50px'\r\n    },\r\n    pageTitle: {\r\n        margin: '10px auto 20px auto'\r\n    },\r\n    textField: {\r\n        margin: '10px auto 10px auto'\r\n    },\r\n    button: {\r\n        position: 'relative',\r\n        float: 'right'\r\n    },\r\n    progress: {\r\n        position: 'absolute'\r\n    },\r\n    customError: {\r\n        color: 'red',\r\n        fontSize: '0.8rem',\r\n        marginTop: 10\r\n    }\r\n})\r\n\r\nclass EditDetails extends Component {\r\n    //initialize user state\r\n    state = {\r\n        bio: '',\r\n        location: '',\r\n        open: false\r\n    };\r\n    //set user details\r\n    componentDidMount() {\r\n        const { credentials } = this.props;\r\n        this.mapUserDetailToState(credentials);\r\n    }\r\n    //open dialog function\r\n    handleOpen = () => {\r\n        this.setState({ open: true });\r\n        this.mapUserDetailToState(this.props.credentials);\r\n    }\r\n    //close dialog function\r\n    handleClose = () => {\r\n        this.setState({ open: false });\r\n    }\r\n    //map form input to global state\r\n    mapUserDetailToState = (credentials) => {\r\n        this.setState({\r\n            bio: credentials.bio ? credentials.bio : '',\r\n            location: credentials.location ? credentials.location : ''\r\n        });\r\n    }\r\n    //targets form field and allows change of target value\r\n    handleChange = (event) => {\r\n        this.setState({\r\n           [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    //submit function\r\n    handleSubmit =() => {\r\n        const userDetails ={\r\n            bio: this.state.bio,\r\n            location: this.state.location\r\n        };\r\n        this.props.editUserDetails(userDetails);\r\n        this.handleClose();\r\n    }\r\n    render() {\r\n        const {classes } = this.props;\r\n        return (\r\n            <Fragment>\r\n                <MyButton\r\n                    tip=\"Edit Details\"\r\n                    onClick={this.handleOpen}\r\n                    btnClassName={classes.button}\r\n                >\r\n                    <EditIcon color=\"primary\"/>\r\n                </MyButton>\r\n                <Dialog\r\n                    open={this.state.open}\r\n                    onClose={this.handleClose}\r\n                    fullWidth\r\n                    maxWidth=\"sm\"\r\n                >\r\n                    <DialogTitle>Edit Your Details</DialogTitle>\r\n                    <DialogContent>\r\n                        <form>\r\n                            <TextField\r\n                                name=\"bio\"\r\n                                type=\"text\"\r\n                                label=\"Bio\"\r\n                                multiline\r\n                                rows=\"3\"\r\n                                placeholder=\"A short bio about yourself\"\r\n                                className={classes.textField}\r\n                                value={this.state.bio}\r\n                                onChange={this.handleChange}\r\n                                fullWidth\r\n                            />\r\n                            <TextField\r\n                                name=\"location\"\r\n                                type=\"text\"\r\n                                label=\"Location\"\r\n                                placeholder=\"Where you live\"\r\n                                className={classes.textField}\r\n                                value={this.state.location}\r\n                                onChange={this.handleChange}\r\n                                fullWidth\r\n                            />\r\n                        </form>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleSubmit} color=\"primary\">\r\n                            Save\r\n                        </Button>\r\n                        <Button onClick={this.handleClose} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </Fragment>\r\n        )\r\n    }\r\n};\r\n\r\n//map user state to global props\r\nconst mapStateToProps = (state) => ({\r\n    credentials: state.user.credentials\r\n});\r\n\r\n//actions used\r\nconst mapActionsToProps = {\r\n    editUserDetails\r\n};\r\n\r\n//checks prop types for user\r\nEditDetails.propTypes = {\r\n    editUserDetails: PropTypes.func.isRequired,\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default connect(mapStateToProps,mapActionsToProps)(withStyles(styles)(EditDetails));","import React, { Component,Fragment } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport { Link } from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\nimport EditDetails from './EditDetails';\r\nimport MyButton from '../util/myButton';\r\n\r\n//material ui components\r\nimport Button from '@material-ui/core/Button';\r\nimport MuiLink from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { logoutUser,uploadImage } from '../redux/actions/userActions';\r\n\r\n//npm install --save @material-ui/icons\r\n//icons\r\nimport LocationOn from '@material-ui/icons/LocationOn';\r\nimport CalendarToday from '@material-ui/icons/CalendarToday';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport KeyboardReturn from '@material-ui/icons/KeyboardReturn';\r\n\r\nconst styles = (theme) => ({\r\n    paper: {\r\n        padding: 20\r\n    },\r\n    profile: {\r\n        '& .image-wrapper': {\r\n            textAlign: 'center',\r\n            position: 'relative',\r\n            '& button': {\r\n                position: 'absolute',\r\n                top: '80%',\r\n                left: '70%'\r\n            }\r\n        },\r\n        '& .profile-image': {\r\n            width: 200,\r\n            height: 200,\r\n            objectFit: 'cover',\r\n            maxWidth: '100%',\r\n            borderRadius: '50%'\r\n        },\r\n        '& .profile-details': {\r\n            textAlign: 'center',\r\n            '& span, svg': {\r\n                verticalAlign: 'middle'\r\n            },\r\n            '& a': {\r\n                color: '#00bcd4'\r\n            }\r\n        },\r\n        '& hr': {\r\n            border: 'none',\r\n            margin: '0 0 10px 0'\r\n        },\r\n        '& svg.button': {\r\n            '&:hover': {\r\n                cursor: 'pointer'\r\n            }\r\n        }\r\n    },\r\n    buttons: {\r\n        textAlign: 'center',\r\n        '& a': {\r\n            margin: '20px 10px'\r\n        }\r\n    }\r\n});\r\n\r\nclass Profile extends Component {\r\n    //profile image upload method\r\n    handleImageChange = (event) => {\r\n        const image = event.target.files[0];\r\n        const formData = new FormData();\r\n        formData.append('image',image,image.name);\r\n        this.props.uploadImage(formData);\r\n    };\r\n    //upload button method\r\n    handleEditPicture = () => {\r\n        const fileInput = document.getElementById('imageInput');\r\n        fileInput.click();\r\n    };\r\n    //logout method\r\n    handleLogout = () => {\r\n        this.props.logoutUser();\r\n    }\r\n    render() {\r\n        const { classes,\r\n            user: {\r\n                credentials: { handle,createdAt,imageUrl,bio,location },\r\n                loading,\r\n                authenticated\r\n            }\r\n        } = this.props;\r\n\r\n        //check login\r\n        let profileMarkup = !loading ?\r\n            //if loaded\r\n            (authenticated ?\r\n                //if auth\r\n                (\r\n                    <Paper className={classes.paper}>\r\n                        <div className={classes.profile}>\r\n                            <div className=\"image-wrapper\">\r\n                                <img src={imageUrl} alt=\"profile\" className=\"profile-image\"/>\r\n                                <input\r\n                                    type=\"file\"\r\n                                    id=\"imageInput\"\r\n                                    hidden=\"hidden\"\r\n                                    onChange={this.handleImageChange}\r\n                                />\r\n                                <MyButton\r\n                                    tip=\"Edit Profile Picture\"\r\n                                    onClick={this.handleEditPicture}\r\n                                    btnClassName=\"button\"\r\n                                >\r\n                                    <EditIcon color=\"primary\"/>\r\n                                </MyButton>\r\n                            </div>\r\n                            <hr/>\r\n                            <div className=\"profile-details\">\r\n                                <MuiLink component={Link} to={`/users/${handle}`} color=\"primary\" variant=\"h5\">\r\n                                    @{handle}\r\n                                </MuiLink>\r\n                                <hr/>\r\n                                {bio && <Typography variant=\"body2\">{bio}</Typography>}\r\n                                <hr/>\r\n                                {location && (\r\n                                    <Fragment>\r\n                                        <LocationOn color=\"primary\"/> <span>{location}</span>\r\n                                        <hr/>\r\n                                    </Fragment>\r\n                                )}\r\n                                <CalendarToday color=\"primary\"/>{' '}\r\n                                <span>Joined {dayjs(createdAt).format('MMM YYYY')}</span>\r\n                            </div>\r\n                            <MyButton\r\n                                tip=\"Logout\"\r\n                                onClick={this.handleEditPicture}\r\n                            >\r\n                                <KeyboardReturn color=\"primary\"/>\r\n                            </MyButton>\r\n                            <EditDetails/>\r\n                        </div>\r\n                    </Paper>\r\n                )\r\n                //else not auth\r\n                : (\r\n                    <Paper className={classes.paper}>\r\n                        <Typography variant=\"body2\" align=\"center\">\r\n                            No profile found, please login again\r\n                        </Typography>\r\n                        <div className={classes.buttons}>\r\n                            <Button variant=\"contained\" color=\"primary\" component={Link} to=\"/login\">\r\n                                Login\r\n                            </Button>\r\n                            <Button variant=\"contained\" color=\"secondary\" component={Link} to=\"/login\">\r\n                                Signup\r\n                            </Button>\r\n                        </div>\r\n                    </Paper>\r\n                )\r\n            ) \r\n            //else loading 7.20?\r\n            : (<p>Loading...</p>)\r\n\r\n        return profileMarkup;\r\n    }\r\n};\r\n\r\n//map user state to global props\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user\r\n});\r\n\r\n//actions used\r\nconst mapActionsToProps = {\r\n    logoutUser,\r\n    uploadImage\r\n};\r\n\r\n//checks prop types for user\r\nProfile.propTypes = {\r\n    logoutUser: PropTypes.func.isRequired,\r\n    uploadImage: PropTypes.func.isRequired,\r\n    user: PropTypes.object.isRequired,\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default connect(mapStateToProps,mapActionsToProps)(withStyles(styles)(Profile));","import React, { Component } from 'react';\r\n//npm install --save axios\r\nimport axios from 'axios';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport PropTypes from 'prop-types';\r\n\r\n//import components\r\nimport Post from '../components/Post';\r\nimport Profile from '../components/Profile';\r\n\r\n//redux components\r\nimport { connect } from 'react-redux';\r\nimport { getPosts } from '../redux/actions/dataActions'; \r\n\r\n//home page rendering\r\nclass home extends Component {\r\n    //get posts\r\n    componentDidMount() {\r\n        this.props.getPosts();\r\n    }\r\n    render() {\r\n        const{ posts,loading } = this.props.data;\r\n        //checks if posts exist and loaded\r\n        let recentPostMarkup = !loading ? (\r\n            //renders all post from Post component\r\n            posts.map((post) => <Post key={post.postId} post={post}/>)\r\n        ) : <p>Loading...</p>\r\n        return (\r\n            //Create grid structure for posts\r\n            <div>\r\n                <Grid container spacing={10}>\r\n                    <Grid item sm={8} xs={12}>\r\n                        {recentPostMarkup}\r\n                    </Grid>\r\n                    <Grid item sm={4} xs={12}>\r\n                        <Profile/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//checks prop types for posts\r\nhome.propTypes = {\r\n    getPosts: PropTypes.func.isRequired,\r\n    data: PropTypes.object.isRequired\r\n}\r\n\r\n//map post state to global props\r\nconst mapStateToProps = (state) => ({\r\n    data: state.data\r\n});\r\n\r\n//actions used\r\nconst mapActionsToProps = {\r\n    getPosts\r\n}\r\n\r\nexport default connect(mapStateToProps,mapActionsToProps)(home);","import React, { Component } from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport PropTypes from 'prop-types';\r\nimport AppIcon from '../images/icon.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//material ui form components\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n//redux components\r\nimport { connect } from 'react-redux';\r\nimport { loginUser } from '../redux/actions/userActions'; \r\n\r\n//css\r\nconst styles = {\r\n    form: {\r\n        textAlign: 'center'\r\n    },\r\n    image: {\r\n        margin: '20px auto 10px auto',\r\n        height: '50px',\r\n        width: '50px'\r\n    },\r\n    pageTitle: {\r\n        margin: '10px auto 20px auto'\r\n    },\r\n    textField: {\r\n        margin: '10px auto 10px auto'\r\n    },\r\n    button: {\r\n        marginTop: 20,\r\n        marginBottom: 20,\r\n        position: 'relative'\r\n    },\r\n    progress: {\r\n        position: 'absolute'\r\n    },\r\n    customError: {\r\n        color: 'red',\r\n        fontSize: '0.8rem',\r\n        marginTop: 10\r\n    }\r\n}\r\n\r\n//login rendering\r\nclass login extends Component {\r\n    //default fields\r\n    constructor() {\r\n        super();\r\n        this.state ={\r\n            email: '',\r\n            password: '',\r\n            errors: {}\r\n        }\r\n    }\r\n    //get props for validation\r\n    componentWillReceiveProps(nextProps) {\r\n        if(nextProps.UI.errors) {\r\n            this.setState({ errors: nextProps.UI.errors });\r\n        }\r\n    }\r\n    //redirect after submit\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        //login fields for userData object\r\n        const userData = {\r\n            email: this.state.email,\r\n            password: this.state.password\r\n        };\r\n        //redirect on success\r\n        this.props.loginUser(userData, this.props.history);\r\n    }\r\n    //targets form field and allows change of target value\r\n    handleChange = (event) => {\r\n        this.setState({\r\n           [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    render() {\r\n        //bring prop styles\r\n        const { classes,UI: { loading } } = this.props;\r\n        //bring errors and load state\r\n        const { errors} = this.state;\r\n        return (\r\n            //create responsive division on page\r\n            <Grid container className={classes.form}>\r\n                <Grid item sm/>\r\n                <Grid item sm>\r\n                    <img src={AppIcon} alt=\"logo\" className={classes.image}/>\r\n                    <Typography variant=\"h4\" className={classes.pageTitle}>\r\n                        Login\r\n                    </Typography>\r\n                    {/*login form*/}\r\n                    <form noValidate onSubmit={this.handleSubmit}>\r\n                        <TextField id=\"email\"\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            className={classes.textField}\r\n                            helperText={errors.email}\r\n                            //display null email error\r\n                            error={errors.email ? true : false}\r\n                            value={this.state.email}\r\n                            onChange={this.handleChange}\r\n                            fullWidth/>\r\n                        <TextField id=\"password\"\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            className={classes.textField}\r\n                            //display null password error\r\n                            helperText={errors.password}\r\n                            error={errors.password ? true : false}\r\n                            value={this.state.password}\r\n                            onChange={this.handleChange}\r\n                            fullWidth/>\r\n                        {errors.general && (\r\n                            //display wrong credential error\r\n                            <Typography variant=\"body2\" className={classes.customError}>\r\n                                {errors.general}\r\n                            </Typography>\r\n                        )}\r\n                        <Button type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.button}\r\n                            disabled={loading}>\r\n                                Login\r\n                                {loading && (\r\n                                    //progress icon\r\n                                    <CircularProgress size={30} className={classes.progress}/>\r\n                                )}\r\n                        </Button>\r\n                        <br/>\r\n                        <small>Don't have an account? Sign up <Link to=\"/signup\">here</Link></small>\r\n                    </form>\r\n                </Grid>\r\n                <Grid item sm/>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\n//checks prop types for login\r\nlogin.propTypes = {\r\n    classes: PropTypes.object.isRequired,\r\n    loginUser: PropTypes.func.isRequired,\r\n    user: PropTypes.object.isRequired,\r\n    UI: PropTypes.object.isRequired\r\n}\r\n\r\n//map login state to global props\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user,\r\n    UI: state.UI\r\n});\r\n\r\n//actions used\r\nconst mapActionsToProps = {\r\n    loginUser\r\n}\r\n\r\nexport default connect(mapStateToProps,mapActionsToProps)(withStyles(styles)(login));","import React, { Component } from 'react';\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport PropTypes from 'prop-types';\r\nimport AppIcon from '../images/icon.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//material ui form components\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport { signupUser } from '../redux/actions/userActions'; \r\n\r\n//css\r\nconst styles = {\r\n    form: {\r\n        textAlign: 'center'\r\n    },\r\n    image: {\r\n        margin: '20px auto 10px auto',\r\n        height: '50px',\r\n        width: '50px'\r\n    },\r\n    pageTitle: {\r\n        margin: '10px auto 20px auto'\r\n    },\r\n    textField: {\r\n        margin: '10px auto 10px auto'\r\n    },\r\n    button: {\r\n        marginTop: 20,\r\n        marginBottom: 20,\r\n        position: 'relative'\r\n    },\r\n    progress: {\r\n        position: 'absolute'\r\n    },\r\n    customError: {\r\n        color: 'red',\r\n        fontSize: '0.8rem',\r\n        marginTop: 10\r\n    }\r\n}\r\n\r\n//signup rendering\r\nclass signup extends Component {\r\n    //default fields\r\n    constructor() {\r\n        super();\r\n        this.state ={\r\n            email: '',\r\n            password: '',\r\n            confirmPassword: '',\r\n            handle: '',\r\n            errors: {}\r\n        }\r\n    }\r\n    //get props for validation\r\n    componentWillReceiveProps(nextProps) {\r\n        if(nextProps.UI.errors) {\r\n            this.setState({ errors: nextProps.UI.errors });\r\n        }\r\n    }\r\n    //redirect after submit\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        //change load flag\r\n        this.setState({\r\n            loading: true\r\n        });\r\n        //signup fields for userData object\r\n        const newUserData = {\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n            confirmPassword: this.state.confirmPassword,\r\n            handle: this.state.handle\r\n        };\r\n        //process signup\r\n        this.props.signupUser(newUserData,this.props.history);\r\n    }\r\n    //targets form field and allows change of target value\r\n    handleChange = (event) => {\r\n        this.setState({\r\n           [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    render() {\r\n        //bring prop styles\r\n        const { classes,UI: { loading } } = this.props;\r\n        //bring errors and load state\r\n        const { errors} = this.state;\r\n        return (\r\n            //create responsive division on page\r\n            <Grid container className={classes.form}>\r\n                <Grid item sm/>\r\n                <Grid item sm>\r\n                    <img src={AppIcon} alt=\"logo\" className={classes.image}/>\r\n                    <Typography variant=\"h4\" className={classes.pageTitle}>\r\n                        Signup\r\n                    </Typography>\r\n                    {/*login form*/}\r\n                    <form noValidate onSubmit={this.handleSubmit}>\r\n                        <TextField id=\"email\"\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            label=\"Email\"\r\n                            className={classes.textField}\r\n                            helperText={errors.email}\r\n                            //display null email error\r\n                            error={errors.email ? true : false}\r\n                            value={this.state.email}\r\n                            onChange={this.handleChange}\r\n                            fullWidth/>\r\n                        <TextField id=\"handle\"\r\n                            name=\"handle\"\r\n                            type=\"text\"\r\n                            label=\"Username\"\r\n                            className={classes.textField}\r\n                            //display null password error\r\n                            helperText={errors.handle}\r\n                            error={errors.handle ? true : false}\r\n                            value={this.state.handle}\r\n                            onChange={this.handleChange}\r\n                            fullWidth/>\r\n                        <TextField id=\"password\"\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            className={classes.textField}\r\n                            //display null password error\r\n                            helperText={errors.password}\r\n                            error={errors.password ? true : false}\r\n                            value={this.state.password}\r\n                            onChange={this.handleChange}\r\n                            fullWidth/>\r\n                        <TextField id=\"confirmPassword\"\r\n                            name=\"confirmPassword\"\r\n                            type=\"password\"\r\n                            label=\"Confirm Password\"\r\n                            className={classes.textField}\r\n                            //display null password error\r\n                            helperText={errors.confirmPassword}\r\n                            error={errors.confirmPassword ? true : false}\r\n                            value={this.state.confirmPassword}\r\n                            onChange={this.handleChange}\r\n                            fullWidth/>\r\n                        {errors.general && (\r\n                            //display wrong credential error\r\n                            <Typography variant=\"body2\" className={classes.customError}>\r\n                                {errors.general}\r\n                            </Typography>\r\n                        )}\r\n                        <Button type=\"submit\"\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            className={classes.button}\r\n                            disabled={loading}>\r\n                                Signup\r\n                                {loading && (\r\n                                    //progress icon\r\n                                    <CircularProgress size={30} className={classes.progress}/>\r\n                                )}\r\n                        </Button>\r\n                        <br/>\r\n                        <small>Already have a login? Login <Link to=\"/login\">here</Link></small>\r\n                    </form>\r\n                </Grid>\r\n                <Grid item sm/>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\n//checks prop types for signup\r\nsignup.propTypes = {\r\n        classes: PropTypes.object.isRequired,\r\n        user: PropTypes.object.isRequired,\r\n        UI: PropTypes.object.isRequired,\r\n        signupUser: PropTypes.object.isRequired\r\n};\r\n\r\n//map signup state to global props\r\nconst mapStateToProps = (state) => ({\r\n    user: state.user,\r\n    UI: state.UI\r\n});\r\n\r\n//actions used\r\nconst mapActionsToProps = {\r\n    signupUser\r\n}\r\n\r\nexport default connect(mapStateToProps,mapActionsToProps)(withStyles(styles)(signup));","//npm install -g create-react-app\r\n//create-react-app prod-exercise\r\n//npm install --save react-router-dom\r\n//npm install --save @material-ui/core\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport './App.css';\r\nimport { ThemeProvider as MuiThemeProvider } from '@material-ui/core/styles';\r\nimport createMuiTheme from '@material-ui/core/styles/createMuiTheme';\r\nimport themeFile from './util/theme';\r\n//npm install --save jwt-decode\r\nimport jwtDecode from 'jwt-decode';\r\nimport axios from 'axios';\r\n\r\n//npm install --save redux react-redux redux-thunk\r\n//redux\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\nimport { SET_AUTHENTICATED } from './redux/types';\r\nimport { logoutUser, getUserData } from './redux/actions/userActions';\r\n\r\n//components\r\nimport Navbar from './components/navbar';\r\nimport AuthRoute from './util/AuthRoute';\r\n\r\n//pages\r\nimport home from './pages/home';\r\nimport login from './pages/login';\r\nimport signup from './pages/signup';\r\n\r\nconst theme = createMuiTheme(themeFile);\r\n\r\naxios.defaults.baseURL = \"https://us-central1-prod-exercise.cloudfunctions.net/api\";\r\n\r\n//checks login status\r\nconst token = localStorage.FBIdToken;\r\nif(token) {\r\n    //decode bearer token\r\n    const decodedToken = jwtDecode(token);\r\n    //check if token expired\r\n    if(decodedToken.exp*1000 < Date.now()) {\r\n        window.location.href='/login';\r\n        store.dispatch(logoutUser());\r\n    }\r\n    else {\r\n        store.dispatch({ type: SET_AUTHENTICATED });\r\n        axios.defaults.headers.common['Authorization'] = token;\r\n        store.dispatch(getUserData());\r\n    }\r\n}\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            //validates user login state\r\n            <Provider store={store}>\r\n                {/*uses palette to apply to page*/}\r\n                <MuiThemeProvider theme={theme}>\r\n                        <Router>\r\n                            <Navbar/>\r\n                            {/*nav bar has its own container and each route is a page path*/}\r\n                            <div className=\"container\">\r\n                                <Switch>\r\n                                    <Route\r\n                                        exact path = \"/\"\r\n                                        component = { home }\r\n                                    />\r\n                                    <AuthRoute\r\n                                        exact path = \"/login\"\r\n                                        component = { login }\r\n                                    />\r\n                                    <AuthRoute\r\n                                        exact path = \"/signup\"\r\n                                        component = { signup }\r\n                                    />\r\n                                </Switch>\r\n                            </div>\r\n                        </Router>\r\n                </MuiThemeProvider>\r\n            </Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","export default  {\r\n    palette: {\r\n        primary: {\r\n            light: '#ce93d8',\r\n            main: '#ba68c8',\r\n            dark: '#9c27b0',\r\n            contrastText: '#fff'\r\n        },\r\n        secondary: {\r\n            light: '#ffcdd2',\r\n            main: '#ef9a9a',\r\n            dark: '#e57373',\r\n            contrastText: '#fff'\r\n        }\r\n    },\r\n    typography: {\r\n        useNextVarients: true\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/icon.dd6dc24b.png\";"],"sourceRoot":""}